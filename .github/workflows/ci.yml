on:
  - push
  - pull_request

name: CI

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
        deno:
          - 0.41.0
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: wasm32-unknown-unknown
          override: true
          default: true
      - name: Install necessary packages
        run: sudo apt install -y make curl zsh
      - name: Cache deno
        uses: actions/cache@v1
        with:
          path: ~/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('deno-lock.json') }}
          restore-keys: |
            deno-${{ runner.os }}-${{ hashFiles('deno-lock.json') }}
            deno-${{ runner.os }}-
            deno-
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: cargo-registry-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
            cargo-registry-${{ runner.os }}-
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: cargo-index-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-index-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
            cargo-index-${{ runner.os }}-
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: cargo-build-target-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-build-target-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
            cargo-build-target-${{ runner.os }}-
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - name: Install Deno
        uses: denolib/setup-deno@v1.3.0
        with:
          deno-version: ${{ matrix.deno }}
      - name: Build
        run: make lib
      - name: Test
        run: |
          export SHELL=/bin/zsh
          deno run -A run-tests.ts
      - name: Prepare for uploading deno cache as artifacts
        run: |
          cp -r ~/.cache/deno deno-cache.tmp
      - name: Upload deno cache as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: deno-cache
          path: deno-cache.tmp
